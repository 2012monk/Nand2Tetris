// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array _mem, _free;
    static int last;
    /** Initializes the class. */
    function void init() {
        let _mem = 0;
        let _free = 2048;
        let _free[0] = 16383;
        let _free[1] = -1;
        let last = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return _mem[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let _mem[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int i, bsize, ret;
        let i = Memory.find(size);
        let bsize = _free[i];
        let _free[i] = bsize - size - 1;
        let ret = i + bsize - size;
        let _free[ret - 1] = size + 1;
        return ret;
    }

    function int find(int size) {
        var int i;
        let i = 0;
        while (_free[i] < size) {
            if (_free[i+1] < 0) {
                do Sys.error(-999);
                do Sys.halt();
                return -1;
            }
            let i = _free[i+1];
        }
        return i;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int seg;
        let seg = o - 1;
        let _free[last+1] = seg;
        let last = seg;
        let _free[seg + 1] = -1;
        return;
    }    
}
