// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array a;
    field int max, len;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let max = maxLength;
        let a = Array.new(20);
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do a.dispose();
        do Memory.deAlloc(this);
        return;
    }


    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j > (len -1)) {
            do Sys.error(-1234);
            return 0;
        }
        return a[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j > (len - 1) | j < 0) {
            do Sys.error(-1234);
            return;
        }
        let a[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let a[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len = 0) {
            return;
        }
        let a[len] = 0;
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, r, c;
        let i = 0;
        let r = 0;
        while (i < len & (a[i] < 48 | a[i] > 57)) {
            let r = r * 10;
            let r = r + (a[i] - 48);
            let i = i + 1;
        }
        return r;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int d;
        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }
        let d = val - ((val / 10) * 10);
        if (val > 9) {
            do setInt(val / 10);
        }
        do appendChar(d + 48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
